use std::str::FromStr;
use crate::ast::{Expr, Opcode, Params, Args, ID, Func};

grammar;

pub Stat: Box<Expr> = {
    <id:ID> "=" <e:Expr> => Box::new(Expr::Assign(ID { name: id}, e)),
    <e:Expr> => e,
};

Expr: Box<Expr> = {
    <e:Expr> <eo:ExprOp> <f:Fact> => Box::new(Expr::Op(e, eo, f)),
    <f: Func> => Box::new(Expr::Func(f)),
    Fact,
};

Fact: Box<Expr> = {
    <e:Fact> <eo:FactOp> <f:Term> => Box::new(Expr::Op(e, eo, f)),
    "(" <id:Func> <p:Params> ")" => Box::new(Expr::App(id, *p)),
    Term,
};

Func: Box<Func> = {
    <id:ID> => Box::new(Func::ID(ID { name: id })),
    "(f" "(" <args:Args> ")" "=>" <e:Expr> ")" => Box::new(Func::Decl(*args, e)),
};

Params: Box<Params> = {
    <mut p:Params> <e:Expr> => { (*p).params.push(e); p },
    <e:Expr> => Box::new(Params { params: vec![e] }),
};

Args: Box<Args> = {
    <mut p:Args> "," <id:Var>  => { (*p).args.push(ID { name: id }); p },
    <id:Var> => Box::new(Args { args: vec![ID { name: id }] }),
};

Term: Box<Expr> = {
    <n:Num> => Box::new(Expr::Number(n)),
    <var:Var> => Box::new(Expr::ID(ID { name: var })),
    "(" <e:Expr> ")" => e,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();
ID: String = <s:r"[A-Z][_a-zA-Z]*"> => String::from_str(s).unwrap();
Var: String = <s:r"[a-z][_a-z]*"> => String::from_str(s).unwrap();
